
package com.jujutsu.tsne.barneshut;

import com.jujutsu.tsne.TSneConfiguration;
import com.jujutsu.utils.MatrixUtils;
import com.jujutsu.utils.TSneUtils;
import org.junit.Test;
import org.junit.rules.Stopwatch;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

import static org.junit.Assert.assertArrayEquals;

public class BHTSneTest {

    private void saveAsFile(double[][] Y, String path) throws IOException {
        BufferedWriter write = null;
        try {
            write = new BufferedWriter(new FileWriter(new File(path)));
            for (int i = 0; i < Y.length; i++) {
                StringBuilder sb = new StringBuilder();
                double[] wordVector = Y[i];
                for (int j = 0; j < wordVector.length; j++) {
                    sb.append(wordVector[j]);
                    if (j < wordVector.length - 1)
                        sb.append(",");
                }
                sb.append("\n");
                write.write(sb.toString());
            }
            write.flush();
            write.close();
        } finally {
            if (write != null)
                write.close();
        }
    }

    @Test
    public void testBarnesHutRun() {

        double[][] aData = new double[][]{
                {0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563}, {0.10959096539488711, 0.7950242948008909, 0.5917848948003486,
                0.2738285999345498, 0.9519684328285567}, {0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123}, {0.7187130179825856,
                0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536}, {0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657,
                0.7977183964212472}, {0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518}, {0.8618953518813538, 0.841333838365635,
                0.5284957375170422, 0.9703367685039823, 0.677388096913733}, {0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357},
                {0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667}, {0.6201844716257464, 0.7603829079070265, 0.07875691596842949,
                0.08651136699915507, 0.7445210640026082}, {0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041}};


        int initial_dims = 5;
        double perplexity = 3.0;
        //double[][] X = MatrixUtils.simpleRead2DMatrix(new File("src/main/resources/datasets/mnist2500_X.txt"), "   ");
        TSneConfiguration config = TSneUtils.buildConfig(aData, 5, initial_dims, perplexity, 200, false, 0.5, false);
        config.setXin(aData);

        BHTSne tsne = new BHTSne();
        long now = System.currentTimeMillis();
        double[][] Y = tsne.tsne(config);

        /*try {
            saveAsFile(Y, "~/Downloads/ref.txt");
        } catch (IOException e) {
            e.printStackTrace();
        }*/

        long then = System.currentTimeMillis();
        System.out.println("Elapsed: " + (then - now) / 1000);
        System.out.println(Arrays.deepToString(Y));
    }


    @Test
    public void testApplyGradient() {
        double[][] Y = new double[][]{{0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563},
                {0.10959096539488711, 0.7950242948008909, 0.5917848948003486, 0.2738285999345498, 0.9519684328285567},
                {0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123},
                {0.7187130179825856, 0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536},
                {0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657, 0.7977183964212472},
                {0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518},
                {0.8618953518813538, 0.841333838365635,  0.5284957375170422, 0.9703367685039823, 0.677388096913733},
                {0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357},
                {0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667},
                {0.6201844716257464, 0.7603829079070265, 0.07875691596842949, 0.08651136699915507, 0.7445210640026082},
                {0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041}};

        int initial_dims = 5;
        double perplexity = 3.0;
        TSneConfiguration config = TSneUtils.buildConfig(Y, 5, initial_dims, perplexity, 20, false, 0.5, false);
        config.setXin(Y);

        BHTSne tsne = new BHTSne();
        long now = System.currentTimeMillis();

        double[] gradient = {   -0.0635,   -0.0791,    0.0228,    0.1360,   -0.2016,
                -0.1034,    0.0976,    0.1266,   -0.0781,    0.0707,
                0.1184,   -0.0018,    0.1719,   -0.2529,   -0.0209,
                0.1204,    0.0855,   -0.0530,    0.1069,   -0.1860,
                -0.0890,   -0.0763,    0.0181,    0.0048,    0.1798,
                0.2917,   -0.1699,    0.1038,   -0.0736,    0.0159,
                0.1324,   -0.0409,   -0.1502,    0.2738,    0.1668,
                -0.3012,    0.1489,   -0.0801,    0.0329,   -0.0817,
                -0.2405,    0.0810,    0.0171,   -0.0201,   -0.1638,
                0.0656,    0.1383,   -0.0707,   -0.1757,    0.0144,
                0.0708,   -0.1725,   -0.0870,    0.0160,    0.1921};

        double [] dY    = new double[55]; // dC
        double [] uY    = new double[55];
        double [] gains = new double[55];

        tsne.updateGradient(11, 5, BHTSne.flatten(Y), 0.5, 200, gradient, uY, gains);

        System.out.println("dY = " + Arrays.toString(dY));
        System.out.println("uY = " + Arrays.toString(uY));
        System.out.println("gains = " + Arrays.toString(gains));
    }

    @Test
    public void testZeroMean() {
        double[] X = new double[]{0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563, 0.10959096539488711, 0.7950242948008909, 0.5917848948003486,
                0.2738285999345498, 0.9519684328285567, 0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123, 0.7187130179825856,
                0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536, 0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657,
                0.7977183964212472, 0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518, 0.8618953518813538, 0.841333838365635,
                0.5284957375170422, 0.9703367685039823, 0.677388096913733, 0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357,
                0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667, 0.6201844716257464, 0.7603829079070265, 0.07875691596842949,
                0.08651136699915507, 0.7445210640026082, 0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041};
        // Compute data mean
        int D = 5, N = 11;
        double [] mean = new double[D];
        for(int n = 0; n < N; n++) {
            for(int d = 0; d < D; d++) {
                mean[d] += X[n * D + d];
            }
        }
        for(int d = 0; d < D; d++) {
            mean[d] /= (double) N;
        }
        System.out.println("means = " + Arrays.toString(mean));
        // Subtract data mean
        for(int n = 0; n < N; n++) {
            for(int d = 0; d < D; d++) {
                X[n * D + d] -= mean[d];
            }
        }
        System.out.println("X = " + Arrays.toString(X));
    }

    @Test
    public void testGradient() {

        double[][] aData = new double[][]{
                {0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563}, {0.10959096539488711, 0.7950242948008909, 0.5917848948003486,
                0.2738285999345498, 0.9519684328285567}, {0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123}, {0.7187130179825856,
                0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536}, {0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657,
                0.7977183964212472}, {0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518}, {0.8618953518813538, 0.841333838365635,
                0.5284957375170422, 0.9703367685039823, 0.677388096913733}, {0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357},
                {0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667}, {0.6201844716257464, 0.7603829079070265, 0.07875691596842949,
                0.08651136699915507, 0.7445210640026082}, {0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041}};


        int initial_dims = 5;
        double perplexity = 3.0;
        TSneConfiguration config = TSneUtils.buildConfig(aData, 5, initial_dims, perplexity, 1000, false, 0.5, false);
        config.setXin(aData);
        //config.setTheta(0.0);

        BHTSne tsne = new BHTSne();
        //double [][] Y = tsne.tsne(config);
        int[] rows = new int[]{0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99};
        int[] cols = new int[]{4, 3, 10, 8, 6, 7, 1, 5, 9, 4, 9, 8, 10, 2, 0, 6, 7, 3, 6, 8, 3, 9, 10, 1, 4, 0, 5, 10, 0, 4, 6, 8, 9, 2, 5, 7, 0, 10, 3, 1, 8, 9, 6, 7, 2, 7, 9, 3, 10, 0, 4, 2, 8, 1, 2, 8, 3, 10, 0, 4, 9, 1, 5, 5, 9, 0, 3, 10, 4, 8, 1, 2, 6, 2, 0, 3, 4, 1, 10, 9, 7, 10, 1, 3, 7, 4, 5, 2, 8, 6, 3, 4, 0, 9, 6, 5, 8, 7, 1};
        double[] vals = new double[]{0.6200, 0.1964, 0.1382, 0.0195, 0.0089, 0.0084, 0.0033, 0.0026, 0.0026, 0.5877, 0.2825, 0.0810, 0.0149, 0.0122, 0.0115, 0.0042, 0.0035, 0.0025, 0.6777, 0.1832, 0.0402, 0.0294, 0.0216, 0.0199, 0.0117, 0.0084, 0.0078, 0.6771, 0.1662, 0.0604, 0.0465, 0.0169, 0.0146, 0.0064, 0.0061, 0.0059, 0.6278, 0.2351, 0.0702, 0.0309, 0.0123, 0.0092, 0.0082, 0.0043, 0.0019, 0.7123, 0.0786, 0.0706, 0.0672, 0.0290, 0.0178, 0.0148, 0.0055, 0.0042, 0.5267, 0.3304, 0.1093, 0.0185, 0.0070, 0.0064, 0.0011, 0.0007, 3.1246e-5, 0.7176, 0.0874, 0.0593, 0.0466, 0.0329, 0.0299, 0.0134, 0.0106, 0.0023, 0.6892, 0.1398, 0.0544, 0.0544, 0.0287, 0.0210, 0.0072, 0.0033, 0.0021, 0.6824, 0.1345, 0.0871, 0.0429, 0.0254, 0.0169, 0.0072, 0.0019, 0.0016, 0.6426, 0.1847, 0.1090, 0.0347, 0.0133, 0.0051, 0.0038, 0.0038, 0.0030};

        double[] dC = new double[55];

        double[] X = new double[]{0.3000, 0.2625, 0.2674, 0.8604, 0.4803,
                0.1096, 0.7950, 0.5918, 0.2738, 0.9520,
                0.9690, 0.8586, 0.8088, 0.5338, 0.5961,
                0.7187, 0.4630, 0.0867, 0.7748, 0.4802,
                0.2493, 0.3227, 0.3064, 0.6980, 0.7977,
                0.7674, 0.1680, 0.3107, 0.0217, 0.1380,
                0.8619, 0.8413, 0.5285, 0.9703, 0.6774,
                0.2624, 0.4374, 0.1569, 0.1107, 0.0601,
                0.4094, 0.9564, 0.5994, 0.8279, 0.3859,
                0.6202, 0.7604, 0.0788, 0.0865, 0.7445,
                0.6548, 0.3385, 0.0582, 0.6249, 0.7432};
        //tsne.computeGradient(rows, cols, vals, X, 11, 5, dC, 0.5);

        System.out.println(Arrays.toString(dC));
    }


    @Test
    public void testComputePerplexity() {
        double[] input = new double[]{0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563, 0.10959096539488711, 0.7950242948008909, 0.5917848948003486,
                0.2738285999345498, 0.9519684328285567, 0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123, 0.7187130179825856,
                0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536, 0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657,
                0.7977183964212472, 0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518, 0.8618953518813538, 0.841333838365635,
                0.5284957375170422, 0.9703367685039823, 0.677388096913733, 0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357,
                0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667, 0.6201844716257464, 0.7603829079070265, 0.07875691596842949,
                0.08651136699915507, 0.7445210640026082, 0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041};
        BHTSne tsne = new BHTSne();
        double[] P = new double[11 * 11];
        tsne.computeGaussianPerplexity(input, 11, 5, P, 3.0);
        System.out.println("P = " + Arrays.toString(P));
        /*INDArray expectedRows = Nd4j.createFromArray(new int[]{0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99});
        INDArray expectedCols = Nd4j.createFromArray(new int[] {4, 3, 10, 8, 6, 7, 1, 5, 9, 4, 9, 8, 10, 2, 0, 6, 7, 3, 6, 8, 3, 9, 10, 1, 4, 0, 5, 10, 0, 4, 6, 8, 9, 2, 5, 7, 0, 10, 3, 1, 8, 9, 6, 7, 2, 7, 9, 3, 10, 0, 4, 2, 8, 1, 2, 8, 3, 10, 0, 4, 9, 1, 5, 5, 9, 0, 3, 10, 4, 8, 1, 2, 6, 2, 0, 3, 4, 1, 10, 9, 7, 10, 1, 3, 7, 4, 5, 2, 8, 6, 3, 4, 0, 9, 6, 5, 8, 7, 1});
        INDArray expectedValues = Nd4j.createFromArray(new double[]{0.6199394088807811, 0.1964597878478939, 0.13826096288374987, 0.019500202354103796, 0.00892011933324624, 0.008390894278481041, 0.00333353509170543, 0.0026231979968002537, 0.0025718913332382506, 0.5877813741023542, 0.2824053513290301, 0.08100641562340703, 0.014863269403258283, 0.01219532549481422, 0.011522812905961816, 0.004243949243254114, 0.0034625890823446427, 0.002518912815575669, 0.6776991917357972, 0.18322100043035286, 0.040180871517768765, 0.02941481903928284, 0.021638322103495665, 0.019899251613183868, 0.011684443899339756, 0.008438621670147969, 0.007823477990631192, 0.6771051692354304, 0.16616561426152007, 0.06038657043891834, 0.04649900136463559, 0.01688479525099354, 0.014596215509122025, 0.006410339053808227, 0.006075759373243866, 0.005876535512328113, 0.6277958923349469, 0.23516301304728018, 0.07022275517450298, 0.030895020584550934, 0.012294459258033335, 0.009236709512467177, 0.00821667460222265, 0.0043013613064171955, 0.0018741141795786528, 0.7122763773574693, 0.07860063708191449, 0.07060648172121314, 0.06721282603559373, 0.028960026354739106, 0.017791245039439314, 0.01482510169996304, 0.005496178688168659, 0.004231126021499254, 0.5266697563046261, 0.33044733058681547, 0.10927281903651001, 0.018510201893239094, 0.006973656012751928, 0.006381768970069082, 0.0010596892780182746, 6.535010081417198E-4, 3.127690982824874E-5, 0.7176189632561156, 0.08740746743997298, 0.059268842313360166, 0.04664131589557433, 0.03288791302822797, 0.029929724912968133, 0.013368915822982491, 0.010616377319500762, 0.0022604800112974647, 0.689185362462809, 0.13977758696450715, 0.05439663822300743, 0.05434167873889952, 0.028687383013327405, 0.02099540802182275, 0.0072154477293594615, 0.0032822412915506907, 0.0021182535547164334, 0.6823844384306867, 0.13452128016104092, 0.08713547969428868, 0.04287399325857787, 0.025452813990877978, 0.016881841237860937, 0.0072200814416566415, 0.0019232561582331975, 0.0016068156267770154, 0.6425943207872832, 0.18472852256294967, 0.1089653923564887, 0.03467849453890959, 0.013282484305873534, 0.005149863792637524, 0.0037974408302766656, 0.003787710699822367, 0.003015770125758626});
        assertArrayEquals(expectedCols.toIntVector(), b.getCols().toIntVector());
        assertArrayEquals(expectedRows.toIntVector(), b.getRows().toIntVector());
        assertArrayEquals(expectedValues.toDoubleVector(), b.getVals().toDoubleVector(), 1e-5);*/
    }
    @Test
    public void testSymmetrize() {
        BHTSne tsne = new BHTSne();

        int[] rowP = new int[]{0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99};
        int[] colP = new int[]{4, 3, 10, 8, 6, 7, 1, 5, 9, 4, 9, 8, 10, 2, 0, 6, 7, 3, 6, 8, 3, 9, 10, 1, 4, 0, 5, 10, 0, 4, 6, 8, 9, 2, 5, 7, 0, 10, 3, 1, 8, 9, 6, 7, 2, 7, 9, 3, 10, 0, 4, 2, 8, 1, 2, 8, 3, 10, 0, 4, 9, 1, 5, 5, 9, 0, 3, 10, 4, 8, 1, 2, 6, 2, 0, 3, 4, 1, 10, 9, 7, 10, 1, 3, 7, 4, 5, 2, 8, 6, 3, 4, 0, 9, 6, 5, 8, 7, 1};
        double[] valP = new double[]{0.6239, 0.1813, 0.12359999999999999, 0.03695, 0.00795, 0.03385, 0.0074, 0.0158, 0.0013, 0.0042, 0.0074, 0.3093, 0.2085, 0.051000000000000004, 0.00895, 0.016050000000000002, 0.00245, 0.00705, 0.00125, 0.0021, 0.016050000000000002, 0.6022, 0.1615, 0.0233, 0.0183, 0.0108, 0.0068000000000000005, 0.0042, 0.011300000000000001, 0.00115, 0.1813, 0.00125, 0.0233, 0.65985, 0.0653, 0.0779, 0.03565, 0.05085, 0.038349999999999995, 0.026250000000000002, 0.6239, 0.3093, 0.0068000000000000005, 0.0653, 0.2099, 0.0205, 0.0173, 0.007300000000000001, 0.0171, 0.0089, 0.0158, 0.011300000000000001, 0.038349999999999995, 0.71495, 0.04775, 0.03615, 0.0089, 0.00275, 0.0021, 1.5623E-5, 0.00795, 0.00245, 0.6022, 0.0779, 0.007300000000000001, 0.5098, 0.015899999999999997, 0.00135, 1.5623E-5, 0.03385, 0.00705, 0.026250000000000002, 0.0171, 0.71495, 0.06515, 0.018349999999999998, 0.00775, 0.00115, 0.03695, 0.051000000000000004, 0.1615, 0.03565, 0.0205, 0.00275, 0.5098, 0.00775, 0.0055, 0.0026, 0.0013, 0.2085, 0.0183, 0.05085, 0.0173, 0.04775, 0.00135, 0.06515, 0.0026, 0.35855, 0.12359999999999999, 0.00895, 0.0108, 0.65985, 0.2099, 0.03615, 0.015899999999999997, 0.018349999999999998, 0.0055, 0.35855};

        int N = 11;

        BHTSne.SymResult res = tsne.symmetrizeMatrix(rowP, colP, valP, N);
        System.out.println("Rows = " + Arrays.toString(res.sym_row_P));
        System.out.println("Cols = " + Arrays.toString(res.sym_col_P));
        System.out.println("Vals = " + Arrays.toString(res.sym_val_P));
    }

    @Test
    public void testSPTree() {
        double[] aData = new double[]{
                0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563, 0.10959096539488711, 0.7950242948008909, 0.5917848948003486,
                0.2738285999345498, 0.9519684328285567, 0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.596087610912912, 0.7187130179825856,
                0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536, 0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657,
                0.7977183964212472, 0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518, 0.8618953518813538, 0.841333838365635,
                0.5284957375170422, 0.9703367685039823, 0.677388096913733, 0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357,
                0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667, 0.6201844716257464, 0.7603829079070265, 0.07875691596842949,
                0.08651136699915507, 0.7445210640026082, 0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041};
        int[] rows = new int[]{
                0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99};
        int[] cols = new int[]{
                4, 3, 10, 8, 6, 7, 1, 5, 9, 4, 9, 8, 10, 2, 0, 6, 7, 3, 6, 8, 3, 9, 10, 1, 4, 0, 5, 10, 0, 4, 6, 8, 9, 2, 5, 7, 0, 10, 3, 1, 8, 9, 6, 7, 2, 7, 9, 3, 10, 0, 4, 2, 8, 1, 2, 8, 3, 10, 0, 4, 9, 1, 5, 5, 9, 0, 3, 10, 4, 8, 1, 2, 6, 2, 0, 3, 4, 1, 10, 9, 7, 10, 1, 3, 7, 4, 5, 2, 8, 6, 3, 4, 0, 9, 6, 5, 8, 7, 1};
        double[] vals = new double[]
                {0.6806, 0.1978, 0.1349, 0.0403, 0.0087, 0.0369, 0.0081, 0.0172, 0.0014, 0.0046, 0.0081, 0.3375, 0.2274, 0.0556, 0.0098, 0.0175, 0.0027, 0.0077, 0.0014, 0.0023, 0.0175, 0.6569, 0.1762, 0.0254, 0.0200, 0.0118, 0.0074, 0.0046, 0.0124, 0.0012, 0.1978, 0.0014, 0.0254, 0.7198, 0.0712, 0.0850, 0.0389, 0.0555, 0.0418, 0.0286, 0.6806, 0.3375, 0.0074, 0.0712, 0.2290, 0.0224, 0.0189, 0.0080, 0.0187, 0.0097, 0.0172, 0.0124, 0.0418, 0.7799, 0.0521, 0.0395, 0.0097, 0.0030, 0.0023, 1.706e-5, 0.0087, 0.0027, 0.6569, 0.0850, 0.0080, 0.5562, 0.0173, 0.0015, 1.706e-5, 0.0369, 0.0077, 0.0286, 0.0187, 0.7799, 0.0711, 0.0200, 0.0084, 0.0012, 0.0403, 0.0556, 0.1762, 0.0389, 0.0224, 0.0030, 0.5562, 0.0084, 0.0060, 0.0028, 0.0014, 0.2274, 0.0200, 0.0555, 0.0189, 0.0521, 0.0015, 0.0711, 0.0028, 0.3911, 0.1349, 0.0098, 0.0118, 0.7198, 0.2290, 0.0395, 0.0173, 0.0200, 0.0060, 0.3911};
        SPTree tree = new SPTree(5, aData, 11);
        double[] posF = new double[55];
        tree.computeEdgeForces(rows, cols, vals, 11, posF);
        System.out.println("posF = " + Arrays.toString(posF));

        double[] sumQ = new double[1];
        double[] zeros = new double[5];
        tree.computeNonEdgeForces(0, 0.5, zeros, sumQ);
        System.out.println("sumQ = " + sumQ[0]);
    }

    @Test
    public void testComputeEdgeForces() {
        double[] input = new double[]{0.3000,    0.2625,    0.2674,    0.8604,    0.4803,
                0.1096,    0.7950,    0.5918,    0.2738,    0.9520,
                0.9690,    0.8586,    0.8088,    0.5338,    0.5961,
                0.7187,    0.4630,    0.0867,    0.7748,    0.4802,
                0.2493,    0.3227,    0.3064,    0.6980,    0.7977,
                0.7674,    0.1680,    0.3107,    0.0217,    0.1380,
                0.8619,    0.8413,    0.5285,    0.9703,    0.6774,
                0.2624,    0.4374,    0.1569,    0.1107,    0.0601,
                0.4094,    0.9564,    0.5994,    0.8279,    0.3859,
                0.6202,    0.7604,    0.0788,    0.0865,    0.7445,
                0.6548,    0.3385,    0.0582,    0.6249,    0.7432};
        SPTree tree = new SPTree(5, input, 11);
        int[] rows = {0,         9,        18,        27,        36,        45,        54,        63,        72,        81,        90,        99};
        int[] cols = {4,         3,        10,         8,         6,         7,         1,         5,         9,         4,         9,         8,        10,         2,         0,         6,         7,         3,         6,         8,         3,         9,        10,         1,         4,         0,         5,        10,         0,         4,         6,         8,         9,         2,         5,         7,         0,        10,         3,         1,         8,         9,         6,         7,         2,         7,         9,         3,        10,         0,         4,         2,         8,         1,         2,         8,         3,        10,         0,         4,         9,         1,         5,         5,         9,         0,         3,        10,         4,         8,         1,         2,         6,         2,         0,         3,         4,         1,        10,         9,         7,        10,         1,         3,         7,         4,         5,         2,         8,         6,         3,         4,         0,         9,         6,         5,         8,         7,         1};
        double[] vals = {0.6200,    0.1964,    0.1382,    0.0195,    0.0089,    0.0084,    0.0033,    0.0026,    0.0026,    0.5877,    0.2825,    0.0810,    0.0149,    0.0122,    0.0115,    0.0042,    0.0035,    0.0025,    0.6777,    0.1832,    0.0402,    0.0294,    0.0216,    0.0199,    0.0117,    0.0084,    0.0078,    0.6771,    0.1662,    0.0604,    0.0465,    0.0169,    0.0146,    0.0064,    0.0061,    0.0059,    0.6278,    0.2351,    0.0702,    0.0309,    0.0123,    0.0092,    0.0082,    0.0043,    0.0019,    0.7123,    0.0786,    0.0706,    0.0672,    0.0290,    0.0178,    0.0148,    0.0055,    0.0042,    0.5267,    0.3304,    0.1093,    0.0185,    0.0070,    0.0064,    0.0011,    0.0007, 3.1246e-5,    0.7176,    0.0874,    0.0593,    0.0466,    0.0329,    0.0299,    0.0134,    0.0106,    0.0023,    0.6892,    0.1398,    0.0544,    0.0544,    0.0287,    0.0210,    0.0072,    0.0033,    0.0021,    0.6824,    0.1345,    0.0871,    0.0429,    0.0254,    0.0169,    0.0072,    0.0019,    0.0016,    0.6426,    0.1847,    0.1090,    0.0347,    0.0133,    0.0051,    0.0038,    0.0038,    0.0030};
        int N = 11;
        double [] pos_f = new double[55];
        tree.computeEdgeForces(rows, cols, vals, N, pos_f);
        System.out.println(Arrays.toString(pos_f));

        double [] sum_Q = new double[1];
        double [][] neg_f = new double[11][5];
        for (int n = 0; n < N; ++n) {
            tree.computeNonEdgeForces(n, 0.5, neg_f[n], sum_Q);
            System.out.println("neg = " + Arrays.toString(neg_f[n]));
            System.out.println("sumQ = " + Arrays.toString(sum_Q));
        }
    }

    @Test
    public void testSpTree() {
        double[] input = new double[]{0.2999816948164936, 0.26252049735806526, 0.2673853427498767, 0.8604464129156685, 0.4802652829902563,
                0.10959096539488711, 0.7950242948008909, 0.5917848948003486,0.2738285999345498, 0.9519684328285567,
                0.9690024759209738, 0.8585615547624705, 0.8087760944312002, 0.5337951589543348, 0.5960876109129123,
                0.7187130179825856, 0.4629777327445964, 0.08665909175584818, 0.7748005397731237, 0.48020186965468536,
                0.24927351841378798, 0.32272599988270445, 0.306414968984427, 0.6980212149215657, 0.7977183964212472,
                0.7673513094629704, 0.1679681724796478, 0.3107359484804584, 0.021701726051792103, 0.13797462786662518,
                0.8618953518813538, 0.841333838365635,  0.5284957375170422, 0.9703367685039823, 0.677388096913733,
                0.2624474979832243, 0.43740966353106536, 0.15685545957858893, 0.11072929134449871, 0.06007395961283357,
                0.4093918718557811, 0.9563909195720572, 0.5994144944480242, 0.8278927844215804, 0.38586830957105667,
                0.6201844716257464, 0.7603829079070265, 0.07875691596842949, 0.08651136699915507, 0.7445210640026082,
                0.6547649514127559, 0.3384719042666908, 0.05816723105860, 0.6248951423054205, 0.7431868493349041};

        int[] rows = {0, 10, 20, 30, 40, 50, 60, 69, 78, 88, 98, 108};
        double[] cols = {4.0000, 3.0000, 10.0000, 8.0000, 6.0000, 7.0000, 1.0000, 5.0000, 9.0000, 2.0000, 0, 4.0000, 9.0000, 8.0000, 10.0000, 2.0000, 6.0000, 7.0000, 3.0000, 5.0000, 1.0000, 6.0000, 8.0000, 3.0000, 9.0000, 10.0000, 4.0000, 0, 5.0000, 7.0000, 0, 1.0000, 2.0000, 10.0000, 4.0000, 6.0000, 8.0000, 9.0000, 5.0000, 7.0000, 0, 1.0000, 2.0000, 3.0000, 10.0000, 8.0000, 9.0000, 6.0000, 7.0000, 5.0000, 0, 2.0000, 3.0000, 7.0000, 9.0000, 10.0000, 4.0000, 8.0000, 1.0000, 6.0000, 0, 1.0000, 2.0000, 3.0000, 4.0000, 8.0000, 10.0000, 9.0000, 5.0000, 0, 1.0000, 3.0000, 4.0000, 5.0000, 9.0000, 10.0000, 8.0000, 2.0000, 0, 1.0000, 2.0000, 3.0000, 4.0000, 5.0000, 6.0000, 7.0000, 10.0000, 9.0000, 0, 1.0000, 2.0000, 3.0000, 4.0000, 5.0000, 6.0000, 7.0000, 8.0000, 10.0000, 0, 1.0000, 2.0000, 3.0000, 4.0000, 5.0000, 6.0000, 7.0000, 8.0000, 9.0000};
        int[] cols1 = new int[cols.length];
        for (int i = 0; i < cols.length; ++i)
            cols1[i] = (int)cols[i];

        double[] vals = {0.6806, 0.1978, 0.1349, 0.0403, 0.0087, 0.0369, 0.0081, 0.0172, 0.0014, 0.0046, 0.0081, 0.3375, 0.2274, 0.0556, 0.0098, 0.0175, 0.0027, 0.0077, 0.0014, 0.0023, 0.0175, 0.6569, 0.1762, 0.0254, 0.0200, 0.0118, 0.0074, 0.0046, 0.0124, 0.0012, 0.1978, 0.0014, 0.0254, 0.7198, 0.0712, 0.0850, 0.0389, 0.0555, 0.0418, 0.0286, 0.6806, 0.3375, 0.0074, 0.0712, 0.2290, 0.0224, 0.0189, 0.0080, 0.0187, 0.0097, 0.0172, 0.0124, 0.0418, 0.7799, 0.0521, 0.0395, 0.0097, 0.0030, 0.0023, 1.706e-5, 0.0087, 0.0027, 0.6569, 0.0850, 0.0080, 0.5562, 0.0173, 0.0015, 1.706e-5, 0.0369, 0.0077, 0.0286, 0.0187, 0.7799, 0.0711, 0.0200, 0.0084, 0.0012, 0.0403, 0.0556, 0.1762, 0.0389, 0.0224, 0.0030, 0.5562, 0.0084, 0.0060, 0.0028, 0.0014, 0.2274, 0.0200, 0.0555, 0.0189, 0.0521, 0.0015, 0.0711, 0.0028, 0.3911, 0.1349, 0.0098, 0.0118, 0.7198, 0.2290, 0.0395, 0.0173, 0.0200, 0.0060, 0.3911};

        final int N = 11;
        double[] posF = new double[55];
        double[] negF = new double[55];
        SPTree tree = new SPTree(5, input, 11);
        tree.computeEdgeForces(rows, cols1, vals, N, posF);
        System.out.println("posF:" + Arrays.toString(posF));

        double[] sumQ = new double[1];

        for (int n =0; n < N; ++n) {
            tree.computeNonEdgeForces(n, 0.5, negF, sumQ);
        }

        System.out.println("negF = " + Arrays.toString(negF));
        System.out.println(sumQ[0]);
    }
}

